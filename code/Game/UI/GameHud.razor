@using System
@using System.Collections.Generic
@using System.Linq
@using BrickJam.Components
@using BrickJam.Player
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <HealthHud />
    <InventoryPane Inventory=@Inventory />
    <ControlsPane />
    <NavgenLoadingPane />
    <GameOverPane />
</root>

@code
{
    public bool IsOpen { get; set; }
    
    public Inventory Inventory { get; set; }
    
    public static GameHud Instance { get; set; }

    BrickPlayerController Player;
    
    int fixCounter = 0;

    public GameHud()
    {
        Instance = this;
    }

    public void SetInventory(Inventory inventory)
    {
        Inventory = inventory;
    }
    
    public override void Update()
    {
        base.Update();
        
        Player ??= GameManager.ActiveScene.GetAllObjects( true ).FirstOrDefault( X => X.GetComponent<BrickPlayerController>() != null ).GetComponent<BrickPlayerController>();

        if(Player != null)
        {
            Panel.SetClass("dead", Player.IsDead);
            if(Player.IsDead && Input.Released("Jump"))
            {
                Scene.LoadFromFile( "scenes/mainmenu.scene" );
                return;
            }
        }

        if(fixCounter < 3)
        {
            fixCounter++;
            if(fixCounter == 2)
            {
                SetOpen(true);
            }
            else if(fixCounter == 3)
            {
                SetOpen(false);
            }
            return;
        }

        var loading = NavgenLoadingPane.Loading;
        Panel.SetClass("loading", loading);

        if (Input.Pressed("Inventory"))
        {
            SetOpen(!IsOpen);
        }
    }

    public void SetOpen(bool open)
    {
        bool wasOpen = IsOpen;
        IsOpen = open;
        Panel.SetClass("open", IsOpen);

        if( IsOpen != wasOpen )
        {
            InventoryActionMenu.Instance?.Destroy();
            Minimap.Instance.Enabled = IsOpen;
        }
    }

    protected override int BuildHash() => HashCode.Combine( Time.Now );
}