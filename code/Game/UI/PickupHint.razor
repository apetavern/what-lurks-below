@using System
@using System.Collections.Generic
@using System.Linq
@using BrickJam.Components;
@using BrickJam.Player
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <text class="ItemName">@ItemName</text>
    <InputGlyph button="Use" size="small" />
    Pick up
</root>

<style>
    PickupHint {
        position: absolute;
        font-family: Poppins;
        font-size: 14px;
        color: white;
        flex-direction: column;
        align-items: center;
        text-shadow: 0px 0px 5px black;
        opacity: 1;
        transition: all 0.4s ease;
        width: 100%;
        aspect-ratio: 1;

        .ItemName {
            font-weight: bold;
            font-size: 32px;
            margin-bottom: 16px;
            padding: 4px 16px;
            background-color: rgba(0,0,0,0.25);
            border-radius: 12px;
        }
        
        &.Hidden {
            opacity: 0;
        }
    }
</style>

@code
{
    public TimeSince TimeSincePlayerInRange { get; set; }
    private GameObject PickupTarget { get; set; }
    private GameObject Player { get; set; }
    private string ItemName { get; set; }
    private WorldPanel worldPanel;
    private ItemPickup itemPickup;

    public override void OnStart()
    {
        base.OnStart();

        Player = BrickPlayerController.Instance.Player;
        worldPanel = GetComponent<WorldPanel>();
        itemPickup = GetComponent<ItemPickup>();
    }

    public override void Update()
    {
        base.Update();
        

        if (itemPickup == null || worldPanel == null)
        {
            return;
        }


        Panel?.SetClass( "Hidden", TimeSincePlayerInRange > 1 );

        var pickupComponentSceneModel = itemPickup.SceneModel;
        if (pickupComponentSceneModel is null || !pickupComponentSceneModel.IsValid())
            return;

        worldPanel.Position = pickupComponentSceneModel.Transform.Position + Vector3.Up * 32f;
    }

    public void SetItem(ItemPickup item)
    {
        if ( item is null )
            return;

        ItemName = item.Item.Asset.Name;
    }
}
