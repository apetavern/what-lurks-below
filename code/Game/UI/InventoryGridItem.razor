@using System
@using BrickJam;
@using BrickJam.Player
@using Sandbox
@using Sandbox.UI;
@inherits Panel;
@attribute [StyleSheet]

<root style="position: absolute; @GetPositionStyles(); @GetVisibleStyles()">
    <img src=@Item.ImagePath style="width: @(Item.Length * 100)px; height:  @(Item.Height * 100)px" />
</root>

@code
{
    public InventoryItem Item { get; set; }
    
    public InventoryPane InventoryPane { get; set; }
    
    private bool Selected { get; set; }
    
    private Vector2 MouseLocation { get; set; }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        Mouse.Position = Box.Rect.Position + Box.Rect.Size * 0.5f;
        
        Selected = true;
        SetMouseCapture( true );
        InventoryPane.SelectedItem = Item;
    }

    public void Deselect()
    {
        if (!Selected)
            return;
        
        // Attempt to move Item position.
        var inv = InventoryPane.Inventory;
        var loc = new InvCoord((MouseLocation.x / 100).FloorToInt(), (MouseLocation.y / 100).FloorToInt());
        inv.PlaceItem(Item, loc);
        
        Selected = false;
        SetMouseCapture( false );
        InventoryPane.SelectedItem = null;

        Mouse.Position = Box.Rect.Position + Box.Rect.Size * 0.5f + MouseLocation * ScaleToScreen;
    }

    string GetPositionStyles()
    {
        return $"left: {Item.Position.X * 100}px; top: {Item.Position.Y * 100}px";
    }
    
    string GetVisibleStyles()
    {
        return Selected ? "display: none" : "display: flex";
    }

    public override void Tick()
    {
        if (Selected && HasMouseCapture)
        {
            MouseLocation += Mouse.Delta * ScaleFromScreen;
            MouseLocation = MouseLocation.Clamp(
                Vector2.Zero, 
                new Vector2(
                    InventoryPane.Inventory.SlotsX * 100 - Item.Length * 100, 
                    InventoryPane.Inventory.SlotsY * 100 - Item.Height * 100)
                );

            InventoryPane.MouseLocation = MouseLocation;
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Time.Now);
    }
}
