@using System
@using System.Collections.Generic
@using System.Linq
@using BrickJam;
@using BrickJam.Player
@using Sandbox
@using Sandbox.UI;
@inherits Panel;
@attribute [StyleSheet]

@if (Inventory is null)
{
    return;
}

<root>
    <div class="pane" style="width: @(Inventory.SlotsX * 100)px; height:  @(Inventory.SlotsY * 100)px">
        @for (var x = 0; x < Inventory.SlotsX + 1; x++)
        {
            <div class="grid-line-vertical"/>
        }
        @for (var x = 0; x < Inventory.SlotsY + 1; x++)
        {
            <div class="grid-line-horizontal" style="top: @(x * 100)px"/>
        }
        @foreach (var item in Inventory.Get)
        {
            <InventoryGridItem Item=@item InventoryPane=@this />
        }
        @if (SelectedItem is not null)
        {
            <img 
                class="selected-item-preview" 
                src=@SelectedItem.ImagePath 
                style="width: @(SelectedItem.Length * 100)px; height:  @(SelectedItem.Height * 100)px; @GetLocationStyles()" />
        }
    </div>
</root>

@code
{
    public Inventory Inventory { get; set; }
    
    public Vector2 MouseLocation { get; set; }
    
    public InventoryItem SelectedItem { get; set; }
    
    public Panel PreviewCell { get; set; }

    public override void OnButtonEvent(ButtonEvent e)
    {
        if (e.Button != "mouseleft")
            return;

        if (e.Pressed)
            return;

        if (SelectedItem is null)
            return;
        
        var pane = Children.FirstOrDefault();
        if (pane is null)
            return;

        var gridItems = pane.Children.OfType<InventoryGridItem>();
        foreach (var gridItem in gridItems)
        {
            gridItem.Deselect();
        }
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            PreviewCell = Children.First().AddChild<Panel>( "preview-cell" );
        }
    }

    string GetLocationStyles()
    {
        return $"top: {MouseLocation.y - (MouseLocation.y % 100)}px; left: {MouseLocation.x - (MouseLocation.x % 100)}px";
    }

    public override void Tick()
    {
        if (PreviewCell is null)
            return;
        
        PreviewCell.Style.Display = SelectedItem is not null ? DisplayMode.Flex : DisplayMode.None;
        
        if (SelectedItem is not null)
        {
            PreviewCell.Style.Width = SelectedItem.Length * 100;
            PreviewCell.Style.Height = SelectedItem.Height * 100;
            PreviewCell.Style.Top = MouseLocation.y - (MouseLocation.y % 100);
            PreviewCell.Style.Left = MouseLocation.x - (MouseLocation.x % 100);
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Time.Now);
    }
}
