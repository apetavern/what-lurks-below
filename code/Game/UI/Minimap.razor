@using System;
@using System.Collections.Generic;
@using System.Linq;
@using BrickJam.Player;
@using BrickJam.Game;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <ScenePanel @ref="Display" />
    <i class="player" style="transform: translate(-50%, -50%) rotate(@(PlayerAngle.ToString())deg);">forward</i>
    @foreach(var enemy in Enemies)
    {
        if(!enemy.IsValid()) continue;
        var pos = enemy.Transform.Position;
        // Position relative to player
        var relativePos = pos - Player.Transform.Position;
        
        // Clip the relative position to the minimap bounds
        relativePos.x = Math.Clamp(relativePos.x, -1024, 1024);
        relativePos.y = Math.Clamp(relativePos.y, -1024, 1024);

        // Normalize to 0-100% scale
        var x = ((-relativePos.y + 1024) / 2048) * 100f;
        var y = ((-relativePos.x + 1024) / 2048) * 100f;

        <i class="enemy" style="transform: translate(-50%, -50%); left: @x.ToString()%; top: @y.ToString()%;">smart_toy</i>
    }
    <div class="vignette" />
</root>

@code
{    
    public static Minimap Instance { get; set; }

    float PlayerAngle => -(PlayerBody?.Transform.Rotation.Angles().yaw ?? 0f) - 90;

    ScenePanel Display;
    GameObject Player;
    GameObject PlayerBody;
    NavGenComponent NavGen;

    List<GameObject> Enemies = new List<GameObject>();

    public Minimap()
    {
        Instance = this;
    }

    public override void Update()
    {
        base.Update();

        NavGen ??= Scene.GetAllObjects( true ).Where( X => X.GetComponent<NavGenComponent>() != null ).FirstOrDefault().GetComponent<NavGenComponent>();
        bool isReady = NavGen?.Initialized ?? false;
        Panel.SetClass( "hidden", !isReady );

        if(!isReady) return;

        Player ??= Scene.GetAllObjects( true ).FirstOrDefault( p => p.Name == "player" );
        var pc = Player.GetComponent<BrickPlayerController>();
        if(pc == null) return;

        PlayerBody ??= pc.Body;
        if(pc.IsDead) Instance.Enabled = false;

        if(Enemies.Count == 0)
        {
            Enemies = Scene.GetAllObjects( true ).Where( X => X.GetComponent<EnemyController>() != null ).ToList();
        }

        var playerPos = Player.Transform.Position;

        Display.Camera.Ortho = true;
        Display.Camera.OrthoWidth = 2048;
        Display.Camera.OrthoHeight = 2048;
        Display.Camera.ZFar = 3000f;
        
        Display.World = Scene.SceneWorld;
        Display.Camera.Position = new Vector3( playerPos.x, playerPos.y, playerPos.z + 100f);
        Display.Camera.Rotation = Rotation.LookAt(Vector3.Down, Vector3.Up);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Time.Now);
    }
}

